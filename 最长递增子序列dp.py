"""
给你一个整数数组 nums ，找到其中最长严格递增子序列的长度。
子序列 是由数组派生而来的序列，删除（或不删除）数组中的元素而不改变其余元素的顺序。
例如，[3,6,2,7] 是数组 [0,3,1,6,2,2,7] 的子序列
。
示例 1：
输入：nums = [10,9,2,5,3,7,101,18]
输出：4
解释：最长递增子序列是 [2,3,7,101]，因此长度为 4 。

示例 2：

输入：nums = [0,1,0,3,2,3]
输出：4

示例 3：

输入：nums = [7,7,7,7,7,7,7]
输出：1

1.重述问题：在一个长度为n的数组中找最长递增的子序列，求长度
子序列 != 子数组 子数组中不可以跳过元素

2.找到最后一步：选择了某个数作为最长递增子序列的结尾

3.去掉最后一步,问题变成了什么:找到以3结尾前面选择的那个数结尾的最长递增子序列

4.考虑
改为记忆化搜索
"""
nums = eval(input())
n = len(nums)
N = 3010
f = [0 for i in range(N)]

for i in range(0,n):
    f[i] = 1
    for j in range(0,i):
        if nums[j] < nums[i]:
            f[i] = max(f[i],f[j]+1)

""""
另一个操作方法：
f.sort() //排序后，输出f[n-1]就是那个最大的子序列长度
"""
res = 0
for i in range(0,n):
    res = max(res,f[i])
#再一次枚举找出最长的子序列
print(res)
#从0开始编辑的